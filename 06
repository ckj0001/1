package assignment4_1;
import java.net.*;
import java.io.*;

public class Client {
    private Socket socket;
    private PrintWriter out;
    private BufferedReader in;

    public Client() throws IOException {
        String serverAddress = "localhost";
        int serverPort = 3306;
        socket = new Socket(serverAddress, serverPort);
        out = new PrintWriter(socket.getOutputStream(), true);
        in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
    }

    public String sendRequest(String request) throws IOException {
        out.println(request);
        StringBuilder response = new StringBuilder();
        String line;
        while ((line = in.readLine()) != null) {
            response.append(line);
            response.append("\n");
        }
        return response.toString();
    }

    public void close() throws IOException {
        in.close();
        out.close();
        socket.close();
    }
}


package assignment4_1;

import java.sql.ResultSet;

public interface MetropolisControl {
    public ResultSet search(String metropolis, String continent, String population, boolean populationLargerThan, boolean exactMatch);
    public void add(String metropolis, String continent, String population);
    public ResultSet searchLessThan(String metropolis, String continent, String population);
    public ResultSet searchPartialMatch(String metropolis, String continent);

}

package assignment4_1;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import javax.swing.table.DefaultTableModel;

public class MetropolisGUI extends JFrame {

    private JTextField metropolisField, continentField, populationField;
    private JButton addButton, searchButton;
    private JTable resultsTable;
    private MetropolisListener listener;

    public MetropolisGUI() throws IOException {
        super("Metropolis Viewer");
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        metropolisField = new JTextField(10);
        continentField = new JTextField(10);
        populationField = new JTextField(10);

        addButton = new JButton("Add");
        searchButton = new JButton("Search");

        listener = new MetropolisListener();
        addButton.addActionListener(listener);
        searchButton.addActionListener(listener);

        // Set up the table model and the table
        resultsTable = new JTable(new DefaultTableModel(new Object[]{"Metropolis", "Continent", "Population"}, 0));
        JScrollPane tableScrollPane = new JScrollPane(resultsTable);
        tableScrollPane.setPreferredSize(new Dimension(400, 200));

        // Lay out GUI components
        JPanel fieldsPanel = new JPanel();
        fieldsPanel.setLayout(new GridLayout(1, 6));
        fieldsPanel.add(new JLabel("Metropolis:"));
        fieldsPanel.add(metropolisField);
        fieldsPanel.add(new JLabel("Continent:"));
        fieldsPanel.add(continentField);
        fieldsPanel.add(new JLabel("Population:"));
        fieldsPanel.add(populationField);

        JPanel buttonsPanel = new JPanel();
        buttonsPanel.setLayout(new GridLayout(1, 2));
        buttonsPanel.add(addButton);
        buttonsPanel.add(searchButton);

        JPanel northPanel = new JPanel();
        northPanel.setLayout(new BorderLayout());
        northPanel.add(fieldsPanel, BorderLayout.CENTER);
        northPanel.add(buttonsPanel, BorderLayout.EAST);

        setLayout(new BorderLayout());
        add(northPanel, BorderLayout.NORTH);
        add(tableScrollPane, BorderLayout.CENTER);

        pack();
        setVisible(true);

        // Add window listener to close client connection on window close
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                try {
                    listener.closeClient();
                } catch (IOException ioException) {
                    ioException.printStackTrace();
                }
            }
        });
    }

    class MetropolisListener implements ActionListener {

        private Client client;

        MetropolisListener() throws IOException {
            client = new Client();
        }

        public void actionPerformed(ActionEvent e) {
            String cmd = e.getActionCommand();
            try {
                if (cmd.equals("Add")) {
                    String request = "ADD " + metropolisField.getText() + " " + continentField.getText() + " " + populationField.getText();
                    String response = client.sendRequest(request);
                    updateResults(response);
                } else if (cmd.equals("Search")) {
                    String request = "SEARCH " + metropolisField.getText() + " " + continentField.getText() + " " + populationField.getText();
                    String response = client.sendRequest(request);
                    updateResults(response);
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

        private void updateResults(String response) {
            DefaultTableModel model = (DefaultTableModel) resultsTable.getModel();
            model.setRowCount(0); // clear the table
            String[] lines = response.split("\n");
            for (String line : lines) {
                if (!line.isEmpty()) {
                    String[] row = line.split(",");
                    model.addRow(row); // add each row to the table model
                }
            }
        }

        public void closeClient() throws IOException {
            client.close();
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MetropolisGUI();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
    }
}


package assignment4_1;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class MetropolisModel implements MetropolisControl {

    @Override
    public ResultSet search(String metropolis, String continent, String population, boolean populationLargerThan, boolean exactMatch) {
        Connection con = MyDB.getConnection();
        Statement stmt = null;
        ResultSet rs = null;
        try {
            stmt = con.createStatement();
            String query = buildSearchQuery(metropolis, continent, population, populationLargerThan, exactMatch);
            rs = stmt.executeQuery(query);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return rs;
    }

    @Override
    public void add(String metropolis, String continent, String population) {
        Connection con = MyDB.getConnection();
        Statement stmt = null;
        try {
            stmt = con.createStatement();
            String query = "INSERT INTO metropolises (metropolis, continent, population) " +
                    "VALUES ('" + metropolis + "', '" + continent + "', " + population + ")";
            stmt.executeUpdate(query);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    public ResultSet searchLessThan(String metropolis, String continent, String population) {
        Connection con = MyDB.getConnection();
        Statement stmt = null;
        ResultSet rs = null;
        try {
            stmt = con.createStatement();
            String query = buildSearchLessThanQuery(metropolis, continent, population);
            rs = stmt.executeQuery(query);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return rs;
    }

    @Override
    public ResultSet searchPartialMatch(String metropolis, String continent) {
        Connection con = MyDB.getConnection();
        Statement stmt = null;
        ResultSet rs = null;
        try {
            stmt = con.createStatement();
            String query = buildSearchPartialMatchQuery(metropolis, continent);
            rs = stmt.executeQuery(query);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return rs;
    }

    private String buildSearchQuery(String metropolis, String continent, String population, boolean populationLargerThan, boolean exactMatch) {
        String query = "SELECT * FROM metropolises WHERE ";
        String matchType = exactMatch ? " = " : " LIKE ";

        if (!metropolis.isEmpty()) {
            query += "metropolis" + matchType + "'" + (exactMatch ? metropolis : "%" + metropolis + "%") + "' AND ";
        }
        if (!continent.isEmpty()) {
            query += "continent" + matchType + "'" + (exactMatch ? continent : "%" + continent + "%") + "' AND ";
        }
        if (!population.isEmpty()) {
            query += "population" + (populationLargerThan ? " > " : " < ") + population + " AND ";
        }
        // remove trailing " AND "
        query = query.substring(0, query.length() - 5);
        return query;
    }
    private String buildSearchLessThanQuery(String metropolis, String continent, String population) {
        String query = "SELECT * FROM metropolises WHERE ";
        if (!metropolis.isEmpty()) {
            query += "metropolis = '" + metropolis + "' AND ";
        }
        if (!continent.isEmpty()) {
            query += "continent = '" + continent + "' AND ";
        }
        if (!population.isEmpty()) {
            query += "population < " + population + " AND ";
        }
        // remove trailing " AND "
        query = query.substring(0, query.length() - 5);
        return query;
    }

    private String buildSearchPartialMatchQuery(String metropolis, String continent) {
        String query = "SELECT * FROM metropolises WHERE ";
        if (!metropolis.isEmpty()) {
            query += "metropolis LIKE '%" + metropolis + "%' AND ";
        }
        if (!continent.isEmpty()) {
            query += "continent LIKE '%" + continent + "%' AND ";
        }
        // remove trailing " AND "
        query = query.substring(0, query.length() - 5);
        return query;
    }
}


package assignment4_1;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class MyDB {

    private static final String MYSQL_USERNAME = "root";
    private static final String MYSQL_PASSWORD = "1900157363Ckj";
    private static final String MYSQL_DATABASE_SERVER = "127.0.0.1:3306";
    private static final String MYSQL_DATABASE_NAME = "muc";

    private static Connection con;

    static {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            String url = "jdbc:mysql://" + MYSQL_DATABASE_SERVER + "/" + MYSQL_DATABASE_NAME;
            con = DriverManager.getConnection(url, MYSQL_USERNAME, MYSQL_PASSWORD);
        } catch (SQLException e) {
            e.printStackTrace();
            System.err.println("student: Update the MySQL constants to correct values!");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            System.err.println("student: Add the MySQL jar file to your build path!");
        }
    }

    public static Connection getConnection() {
        return con;
    }

    public static void close() {
        try {
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

package assignment4_1;

import javax.swing.table.AbstractTableModel;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class MyTableModel extends AbstractTableModel {

    private List<String[]> data;
    private String[] columnNames;

    public MyTableModel() {
        data = new ArrayList<>();
        columnNames = new String[] {"Metropolis", "Continent", "Population"};
    }


    public void updateResults(ResultSet rs) {
        data.clear();
        try {
            ResultSetMetaData rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();
            columnNames = new String[columnCount];
            for (int i = 1; i <= columnCount; i++) {
                columnNames[i - 1] = rsmd.getColumnName(i);
            }
            while (rs.next()) {
                String[] row = new String[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    row[i - 1] = rs.getString(i);
                }
                data.add(row);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        this.fireTableDataChanged();
    }

    @Override
    public int getRowCount() {
        return data.size();
    }

    @Override
    public int getColumnCount() {
        return columnNames.length;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        return data.get(rowIndex)[columnIndex];
    }

    @Override
    public String getColumnName(int column) {
        return columnNames[column];
    }
}


package assignment4_1;

import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.net.*;
import java.io.*;
import java.sql.*;

public class Server {
    private static final int PORT = 8080;

    public static void main(String[] args) {
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            while (true) {
                new ServerThread(serverSocket.accept()).start();
            }
        } catch (IOException e) {
            System.err.println("Could not listen on port: " + PORT);
            System.exit(-1);
        }
    }
}

class ServerThread extends Thread {
    private Socket socket;

    public ServerThread(Socket socket) {
        this.socket = socket;
    }

    public void run() {
        try (BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
             PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
             Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/test?user=testuser&password=testpass")) {

            String request;
            while ((request = in.readLine()) != null) {
                String[] parts = request.split(" ");
                String cmd = parts[0];
                String metropolis = parts[1];
                String continent = parts[2];
                long population = Long.parseLong(parts[3]);

                PreparedStatement pstmt;
                ResultSet rs;
                StringBuilder response = new StringBuilder();
                if (cmd.equals("ADD")) {
                    pstmt = conn.prepareStatement("INSERT INTO metropolises (metropolis, continent, population) VALUES (?, ?, ?)");
                    pstmt.setString(1, metropolis);
                    pstmt.setString(2, continent);
                    pstmt.setLong(3, population);
                    pstmt.executeUpdate();
                    response.append("Data added successfully");
                } else if (cmd.equals("SEARCH")) {
                    pstmt = conn.prepareStatement("SELECT * FROM metropolises WHERE metropolis = ? AND continent = ? AND population = ?");
                    pstmt.setString(1, metropolis);
                    pstmt.setString(2, continent);
                    pstmt.setLong(3, population);
                    rs = pstmt.executeQuery();

                    while (rs.next()) {
                        response.append(rs.getString("metropolis"));
                        response.append(",");
                        response.append(rs.getString("continent"));
                        response.append(",");
                        response.append(rs.getLong("population"));
                        response.append("\n");
                    }
                }
                out.println(response.toString());
            }
        } catch (IOException | SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                socket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
